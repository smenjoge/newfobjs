{"version":3,"sources":["components/Jumbotron/index.js","components/SearchBox/index.js","components/ResultTable/TableRow.js","components/ResultTable/index.js","App.js","utils/API.js","serviceWorker.js","index.js"],"names":["Jumbotron","className","SearchBox","props","value","handleInputChange","type","aria-label","placeholder","onChange","TableRow","id","name","image","phone","email","dob","key","src","alt","ResultTable","sortOrderName","sortOrderDOB","employees","sortColumn","scope","onClick","map","employee","first","last","picture","medium","Date","date","toLocaleDateString","getEmployees","a","axios","get","apiResp","resultsAll","App","state","search","resultsVis","event","searchInput","target","searchTerm","toLowerCase","filterEmployees","filter","includes","setState","sortBy","employeesArr","sort","emp1","emp2","emp1DOB","emp2DOB","emp1Name","emp2Name","API","then","response","data","results","catch","err","console","log","this","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sTAYeA,MATf,WACE,OACE,yBAAKC,UAAU,mBACb,kDACA,sG,MCaSC,MAjBf,SAAmBC,GAAQ,IACfC,EAA4BD,EAA5BC,MAAOC,EAAqBF,EAArBE,kBACf,OACI,8BACI,2BACIJ,UAAU,eACVK,KAAK,OACLC,aAAW,SACXC,YAAY,YACZJ,MAAOA,EACPK,SAAUJ,M,KCKXK,MAff,SAAmBP,GAAQ,IAChBQ,EAAsCR,EAAtCQ,GAAIC,EAAkCT,EAAlCS,KAAMC,EAA4BV,EAA5BU,MAAOC,EAAqBX,EAArBW,MAAOC,EAAcZ,EAAdY,MAAOC,EAAOb,EAAPa,IACtC,OACI,wBAAIC,IAAKN,GACL,wBAAIV,UAAU,QACV,yBAAKiB,IAAKL,EAAOZ,UAAU,0BAA0BkB,IAAKP,KAE9D,4BAAKA,GACL,4BAAKE,GACL,4BAAKC,GACL,4BAAKC,KC0BFI,IChCXC,EACAC,ED+BWF,EAnCf,SAAqBjB,GAAQ,IAClBoB,EAA0BpB,EAA1BoB,UAAWC,EAAerB,EAAfqB,WAClB,OACI,yBAAKvB,UAAU,aACX,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,2BAAOA,UAAU,uBACb,2BAAOA,UAAU,cACb,4BACI,wBAAIwB,MAAM,OAAV,SACA,wBAAIA,MAAM,MAAMC,QAAS,kBAAMF,EAAW,UAA1C,QACA,wBAAIC,MAAM,OAAV,SACA,wBAAIA,MAAM,OAAV,UACA,wBAAIA,MAAM,MAAMC,QAAS,kBAAMF,EAAW,SAA1C,SAGR,+BACKD,EAAUI,KAAI,SAAAC,GAAQ,OACnB,kBAAC,EAAD,CACIX,IAAKW,EAASjB,GAAGP,MACjBQ,KAAI,UAAKgB,EAAShB,KAAKiB,MAAnB,YAA4BD,EAAShB,KAAKkB,MAC9CjB,MAAOe,EAASG,QAAQC,OACxBlB,MAAOc,EAASd,MAChBC,MAAOa,EAASb,MAChBC,IAAK,IAAIiB,KAAKL,EAASZ,IAAIkB,MAAMC,gC,yCEvBtD,GACXC,aAAa,WAAD,4BAAE,4BAAAC,EAAA,sEACUC,IAAMC,IAJlB,gDAGE,cACNC,EADM,yBAEHA,GAFG,2CAAF,kDAAC,IDGbC,EAAa,GA0GFC,E,4MAvGbC,MAAQ,CACNC,OAAQ,GACRC,WAAY,I,EAedxC,kBAAoB,SAAAyC,GAClB,IAAIC,EAAcD,EAAME,OAAO5C,MAC3B6C,EAAaF,EAAYG,cACzBC,EAAkB,GAGpBA,EADkB,KAAhBJ,EACiBN,EAAWW,QAAO,SAAAxB,GAAQ,OAC3CA,EAAShB,KAAKiB,MAAMqB,cAAcG,SAASJ,IAC3CrB,EAAShB,KAAKkB,KAAKoB,cAAcG,SAASJ,IAC1CrB,EAASb,MAAMmC,cAAcG,SAASJ,IACtCrB,EAASd,MAAMoC,cAAcG,SAASJ,IACtC,IAAIhB,KAAKL,EAASZ,IAAIkB,MAAMC,qBAAqBkB,SAASJ,MAG1CR,EAEpB,EAAKa,SAAS,CAACV,OAAQG,IACvB,EAAKO,SAAS,CAACT,WAAYM,K,EAG7B3B,WAAa,SAAC+B,GACZ,IAAIC,EAAe,EAAKb,MAAME,WAEf,QAAXU,IAIAjC,EAHGA,GAAiC,SAAjBA,EAGJ,OAFA,MAIjBkC,EAAaC,MAAK,SAACC,EAAMC,GACvB,IAAIC,EAAUF,EAAK1C,IAAIkB,KACnB2B,EAAUF,EAAK3C,IAAIkB,KAEvB,GAAqB,QAAjBZ,EAAwB,CAC1B,GAAIsC,EAAUC,EAAW,OAAQ,EACjC,GAAID,EAAUC,EAAU,OAAO,OAC1B,GAAqB,SAAjBvC,EAAyB,CAClC,GAAIsC,EAAUC,EAAW,OAAO,EAChC,GAAID,EAAUC,EAAU,OAAQ,EAElC,OAAO,MAII,SAAXN,IAIAlC,EAHGA,GAAmC,SAAlBA,EAGJ,OAFA,MAIlBmC,EAAaC,MAAK,SAACC,EAAMC,GACvB,IACIG,GADeJ,EAAK9C,KAAKiB,MAAQ,IAAM6B,EAAK9C,KAAKkB,MACzBoB,cAExBa,GADeJ,EAAK/C,KAAKiB,MAAQ,IAAM8B,EAAK/C,KAAKkB,MACzBoB,cAE5B,GAAsB,QAAlB7B,EAAyB,CAC3B,GAAIyC,EAAWC,EAAY,OAAQ,EACnC,GAAID,EAAWC,EAAW,OAAO,OAC5B,GAAsB,SAAlB1C,EAA0B,CACnC,GAAIyC,EAAWC,EAAY,OAAO,EAClC,GAAID,EAAWC,EAAW,OAAQ,EAEpC,OAAO,MAGX,EAAKT,SAAS,CAACT,WAAYW,K,kEA9ER,IAAD,OAClBQ,EAAI5B,eACH6B,MAAK,SAAAC,GACHzB,EAAayB,EAASC,KAAKC,QAC3B,EAAKd,SAAS,CAACT,WAAYJ,OAE7B4B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,Q,+BA4E1B,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CACElE,MAAOqE,KAAK9B,MAAMC,OAClBvC,kBAAmBoE,KAAKpE,oBAE1B,kBAAC,EAAD,CACEkB,UAAWkD,KAAK9B,MAAME,WACtBrB,WAAYiD,KAAKjD,kB,GAjGTkD,IAAMC,WECJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBvB,MAAK,SAAAwB,GACJA,EAAaC,gBAEdrB,OAAM,SAAAsB,GACLpB,QAAQoB,MAAMA,EAAMC,c","file":"static/js/main.87b4af1a.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction Jumbotron() {\r\n  return (\r\n    <div className=\"jumbotron-fluid\">\r\n      <h1>Employee Directory</h1>\r\n      <p>Click on column names to sort or use the search box to narrow results</p>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React from \"react\";\r\nimport \"./style.css\"\r\n\r\nfunction SearchBox(props) {\r\n    const { value, handleInputChange} = props;\r\n    return (\r\n        <form>\r\n            <input \r\n                className=\"form-control\"\r\n                type=\"text\" \r\n                aria-label=\"Search\"\r\n                placeholder=\"Search...\"\r\n                value={value}\r\n                onChange={handleInputChange}\r\n                >\r\n            </input>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SearchBox;","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nfunction TableRow (props) {\r\n    const {id, name, image, phone, email, dob} = props;\r\n    return (\r\n        <tr key={id}>\r\n            <td className=\"w-25\">\r\n                <img src={image} className=\"img-fluid img-thumbnail\" alt={name}></img>\r\n            </td>\r\n            <td>{name}</td>\r\n            <td>{phone}</td>\r\n            <td>{email}</td>\r\n            <td>{dob}</td>\r\n        </tr>\r\n    )\r\n};\r\n\r\nexport default TableRow;","import React from \"react\";\r\nimport \"./style.css\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nfunction ResultTable(props) {\r\n    const {employees, sortColumn } = props;\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-12\">\r\n                    <table className=\"table table-striped\">\r\n                        <thead className=\"thead-dark\">\r\n                            <tr>\r\n                                <th scope=\"col\">Image</th>\r\n                                <th scope=\"col\" onClick={() => sortColumn(\"Name\")}>Name</th>\r\n                                <th scope=\"col\">Phone</th>\r\n                                <th scope=\"col\">E-mail</th>\r\n                                <th scope=\"col\" onClick={() => sortColumn(\"DOB\")}>DOB</th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody>\r\n                            {employees.map(employee => \r\n                                <TableRow \r\n                                    key={employee.id.value}\r\n                                    name={`${employee.name.first} ${employee.name.last}`}\r\n                                    image={employee.picture.medium}\r\n                                    phone={employee.phone}\r\n                                    email={employee.email}\r\n                                    dob={new Date(employee.dob.date).toLocaleDateString()}\r\n                                />\r\n                            )}\r\n                        </tbody>\r\n                    </table>   \r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultTable;","import React from 'react';\nimport \"./components/Jumbotron\";\nimport Jumbotron from \"./components/Jumbotron\";\nimport SearchBox from \"./components/SearchBox\";\nimport ResultTable from \"./components/ResultTable\";\nimport API from \"./utils/API\";\n\nlet sortOrderName;\nlet sortOrderDOB;\nlet resultsAll = [];\n\nclass App extends React.Component {\n  state = {\n    search: \"\",\n    resultsVis: []\n  }\n\n  componentDidMount() {\n    API.getEmployees()\n    .then(response => {\n       resultsAll = response.data.results;\n       this.setState({resultsVis: resultsAll})\n     })\n    .catch(err => console.log(err));\n    // let response = API.getEmployees();\n    // resultsAll = response.results;\n    // this.setState({resultsVis: resultsAll})\n  };\n\n  handleInputChange = event => {\n    let searchInput = event.target.value;\n    let searchTerm = searchInput.toLowerCase();\n    let filterEmployees = [];\n\n    if (searchInput !== \"\") {\n      filterEmployees =  resultsAll.filter(employee => \n        employee.name.first.toLowerCase().includes(searchTerm)  ||\n        employee.name.last.toLowerCase().includes(searchTerm)  ||\n        employee.email.toLowerCase().includes(searchTerm)  ||\n        employee.phone.toLowerCase().includes(searchTerm)  ||\n        new Date(employee.dob.date).toLocaleDateString().includes(searchTerm)\n      )\n    } else {\n      filterEmployees = resultsAll\n    }\n    this.setState({search: searchInput})\n    this.setState({resultsVis: filterEmployees})\n  }\n\n  sortColumn = (sortBy) => {\n    let employeesArr = this.state.resultsVis;\n\n    if (sortBy === \"DOB\") {\n      if (!sortOrderDOB || sortOrderDOB === \"desc\") {\n        sortOrderDOB = \"asc\"\n      } else {\n        sortOrderDOB = \"desc\"\n      }\n      employeesArr.sort((emp1, emp2) => {\n        let emp1DOB = emp1.dob.date;\n        let emp2DOB = emp2.dob.date;\n\n        if (sortOrderDOB === \"asc\") {\n          if (emp1DOB < emp2DOB) { return -1} \n          if (emp1DOB > emp2DOB) {return 1} \n        } else if (sortOrderDOB === \"desc\") {\n          if (emp1DOB < emp2DOB) { return 1} \n          if (emp1DOB > emp2DOB) {return -1} \n        }\n        return 0;\n      })\n    }\n\n    if (sortBy === \"Name\") {\n      if (!sortOrderName || sortOrderName === \"desc\") {\n        sortOrderName = \"asc\"\n      } else {\n        sortOrderName = \"desc\"\n      }\n      employeesArr.sort((emp1, emp2) => {\n        let emp1FullName = emp1.name.first + \" \" + emp1.name.last;\n        let emp1Name = emp1FullName.toLowerCase();\n        let emp2FullName = emp2.name.first + \" \" + emp2.name.last;\n        let emp2Name = emp2FullName.toLowerCase();\n  \n        if (sortOrderName === \"asc\") {\n          if (emp1Name < emp2Name) { return -1} \n          if (emp1Name > emp2Name) {return 1} \n        } else if (sortOrderName === \"desc\") {\n          if (emp1Name < emp2Name) { return 1} \n          if (emp1Name > emp2Name) {return -1} \n        }\n        return 0;\n      })\n    }\n    this.setState({resultsVis: employeesArr})    \n  }\n  \n  render() {\n    return (\n      <div>\n        <Jumbotron />\n        <SearchBox \n          value={this.state.search}\n          handleInputChange={this.handleInputChange}\n        />\n        <ResultTable \n          employees={this.state.resultsVis}\n          sortColumn={this.sortColumn}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import axios from \"axios\";\r\n// import EmployeeData from \"../employeeData.json\";\r\n\r\nconst API_URL = \"https://randomuser.me/api/?results=20&nat=us\";\r\n\r\nexport default {\r\n    getEmployees: async function () {\r\n        let apiResp = await axios.get(API_URL);\r\n        return apiResp;\r\n    } \r\n    // getEmployees: function getEmployees() {\r\n    //     return EmployeeData;\r\n    // } \r\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}